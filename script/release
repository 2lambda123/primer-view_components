#!/usr/bin/env bash

fetch() {
  git fetch --all
}

tag_exists_on_remote() {
 git rev-parse --quiet --verify refs/tags/v$1.$2.$3 > /dev/null
}

working_tree_is_clean() {
  status=$(git status --porcelain)
  [ "$status" == "" ]
}

create_release_branch() {
  git checkout -B release
}

update_readme() {
  sed -i "/## main/ {a\
  \\
  \\
  ## $1.$2.$3
  }" CHANGELOG.md
}

update_ruby_version() {
  # Update version file
  sed -E -i.bak \
      -e "s/MAJOR = [0-9]+/MAJOR = $1/g" \
      -e "s/MINOR = [0-9]+/MINOR = $2/g" \
      -e "s/PATCH = [0-9]+/PATCH = $3/g" \
      lib/primer/view_components/version.rb
}

update_gemfiles() {
  # Update Gemfile.lock
  bundle
  pushd demo
  bundle
  popd
}


update_npm() {
  npm version --no-git-tag-version "$1.$2.$3"
  yarn
}

add_changed_files() {
  git add \
    CHANGELOG.md \
    Gemfile.lock \
    demo/Gemfile.lock \
    lib/primer/view_components/version.rb \
    app/assets/javascripts \
    package.json \
    yarn.lock
}

commit() {
  git commit -m "release $1.$2.$3"
}

push() {
  git push origin release

  echo "####################################################"
  echo "Now, open a PR with this branch and merge it to main"
  echo "Then, run script/publish on main to release the gem and the NPM package"
  echo "Finally, create a GitHub release https://github.com/primer/view_components/releases/new with the changes from CHANGELOG"
  echo "####################################################"
}

main() {
  version=$(ruby ./lib/primer/view_components/version.rb)
  version=(${version//./ })
  major=${version[0]}
  minor=${version[1]}
  patch=${version[2]}

  echo "==================="
  echo "Prerequisite Checks"
  echo "==================="

  fetch
  if ! working_tree_is_clean; then 
    echo "Error: unclean working tree"
    exit 1
  fi 

  echo "Type the number of an option to bump, or pick Manual to enter a version number"
  select bump in Major Minor Patch Manual
  do 
    if [ "$bump" == "Major" ]; then
      major=$((major + 1))
    elif [ "$bump" == "Minor" ]; then
      minor=$((minor + 1))
    elif [ "$bump" == "Patch" ]; then
      patch=$((patch + 1))
    else
      read -p "What version? (Currently $major.$minor.$patch): " new_version
      if [ "$new_version" == "$major.$minor.$patch" ]; then
        echo "Error: Cannot be the same version"
        exit 1
      fi

      new_version=(${new_version//./ })

      major=${new_version[0]}
      minor=${new_version[1]}
      patch=${new_version[2]}
    fi

    echo new version $major $minor $patch

    if tag_exists_on_remote $major $minor $patch; then
      echo "Error: tag exists on remote"
      exit 1
    fi

    create_release_branch
    update_readme $major $minor $patch
    update_ruby_version $major $minor $patch
    update_gemfiles $major $minor $patch
    update_npm $major $minor $patch
    add_changed_files
    commit
    push
  done
}

main
